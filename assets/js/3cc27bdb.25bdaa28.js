(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[292],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,N=d["".concat(o,".").concat(u)]||d[u]||l[u]||s;return n?a.createElement(N,i(i({ref:t},c),{},{components:n})):a.createElement(N,i({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var m={};for(var o in t)hasOwnProperty.call(t,o)&&(m[o]=t[o]);m.originalType=e,m.mdxType="string"==typeof e?e:r,i[1]=m;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3884:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return o},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(2122),r=n(9756),s=(n(7294),n(3905)),i=["components"],m={sidebar_position:13,sidebar_label:"\ud83d\udfe8 \u5408\u4f75\u6392\u5e8f\u6cd5 Mergesort"},o="\u5408\u4f75\u6392\u5e8f\u6cd5 Mergesort",p={unversionedId:"unit01-divide-and-conquer/mergesort",id:"unit01-divide-and-conquer/mergesort",isDocsHomePage:!1,title:"\u5408\u4f75\u6392\u5e8f\u6cd5 Mergesort",description:"\u8b93\u6211\u5011\u5feb\u901f\u56de\u61b6\u6392\u5e8f\u554f\u984c\uff1a",source:"@site/docs/unit01-divide-and-conquer/mergesort.md",sourceDirName:"unit01-divide-and-conquer",slug:"/unit01-divide-and-conquer/mergesort",permalink:"/shuatea-course/docs/unit01-divide-and-conquer/mergesort",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/unit01-divide-and-conquer/mergesort.md",version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13,sidebar_label:"\ud83d\udfe8 \u5408\u4f75\u6392\u5e8f\u6cd5 Mergesort"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udfe8 \u7b2c k \u5c0f\u7684\u6578 Selection",permalink:"/shuatea-course/docs/unit01-divide-and-conquer/quickselect"},next:{title:"\ud83d\udfe8 \u9006\u5e8f\u6578\u5c0d Inversions",permalink:"/shuatea-course/docs/unit01-divide-and-conquer/inversions"}},c=[{value:"\u89e3\u984c\u601d\u8003",id:"\u89e3\u984c\u601d\u8003",children:[]},{value:"\u53c3\u8003\u7a0b\u5f0f\u78bc(C++)",id:"\u53c3\u8003\u7a0b\u5f0f\u78bcc",children:[]}],l={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"\u5408\u4f75\u6392\u5e8f\u6cd5-mergesort"},"\u5408\u4f75\u6392\u5e8f\u6cd5 Mergesort"),(0,s.kt)("p",null,"\u8b93\u6211\u5011\u5feb\u901f\u56de\u61b6\u6392\u5e8f\u554f\u984c\uff1a"),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"\u6392\u5e8f\u554f\u984c")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"\u7d66\u5b9a\u4e00\u500b\u9577\u5ea6\u70ba ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," \u7684\u6574\u6578\u9663\u5217 ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"A"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mn",{parentName:"mrow"},"0.."),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A[0..n-1]")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord"},"."),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"]"))))),"\uff0c\u8acb\u5c07\u9663\u5217\u5167\u5bb9\u7531\u5c0f\u81f3\u5927\u6392\u5e8f\u5f8c\u8f38\u51fa\u3002"))),(0,s.kt)("h2",{id:"\u89e3\u984c\u601d\u8003"},"\u89e3\u984c\u601d\u8003"),(0,s.kt)("p",null,"\u6211\u5011\u53ef\u4ee5\u4e0d\u5206\u9752\u7d05\u7682\u767d\u5730\u5c07\u8cc7\u6599\u5e73\u5747\u5206\u6210\u5169\u5806\uff0c\u7136\u5f8c\u5206\u5225\u905e\u8ff4\u4e0b\u53bb\u5c07\u5b83\u5011\u6392\u597d\u9806\u5e8f\u3002\u63a5\u4e0b\u4f86\u53ea\u8981\u60f3\u8fa6\u6cd5\u5c07\u5169\u500b\u5df2\u7d93\u6392\u597d\u9806\u5e8f\u7684\u5169\u5806\u8cc7\u6599\u300c\u5408\u4f75\u8d77\u4f86\u300d\u5c31\u53ef\u4ee5\u4e86\uff01"),(0,s.kt)("h2",{id:"\u53c3\u8003\u7a0b\u5f0f\u78bcc"},"\u53c3\u8003\u7a0b\u5f0f\u78bc(C++)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"void combine(int A[], int l, int mid, int r) {\n  int *tmp = new int[r - l + 1];\n  int i = l, j = mid, k = 0;\n  while (i < mid || j <= r) {\n    if (j > r || (i < mid && A[i] <= A[j])) {\n      tmp[k++] = A[i++];\n    } else {\n      tmp[k++] = A[j++];\n    }\n  }\n  for (int i = l; i <= r; i++) A[i] = tmp[i - l];\n  delete[] tmp;\n}\n\nvoid mergesort_impl(int A[], int l, int r) {\n  if (l >= r) return;\n  int mid = (l + r) / 2;\n  mergesort_impl(A, l, mid);\n  mergesort_impl(A, mid + 1, r);\n  combine(A, l, mid, r);\n}\n\nvoid mergesort(int A[], int n) {\n  mergesort_impl(A, 0, n - 1);\n}\n")))}d.isMDXComponent=!0}}]);